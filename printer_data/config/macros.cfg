[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  PRINT_END
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  #{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  #{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_minimum.y|float %}
  {% set x_park = 0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    #G1 X{x_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro PROBE_DEPLOY]
description: Easier to remember command to deploy the BLTouch probe
gcode:
  BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro PROBE_STOW]
description: Easier to remember command to stow the BLTouch probe
gcode: 
  BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro PROBE_RESET]
description: Easier to remember command to reset the BLTouch from an error (blinking) state
gcode:
  BLTOUCH_DEBUG COMMAND=reset

########################################
# Sensorless Homing
########################################

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.350 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}


[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.350 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}

[gcode_macro HOME_ALL]
gcode:
    SENSORLESS_HOME_X
    SENSORLESS_HOME_Y
    G28 Z

########################################
# Start/Stop gcode
########################################
# Slic3r/PrusaSlicer/SuperSlicer/OrcaSlicer instructions
# Start gcode should look like this:
# PRINT_START BED_TEMP=[first_layer_bed_temperature] EXTRUDER_TEMP=[first_layer_temperature] PA_VALUE=(something...)

[gcode_macro PRINT_START]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
  {% set PA_VALUE = params.PA_VALUE|default(0)|float %}
  BED_MESH_CLEAR #clear bed mesh (is this even needed?)
  SET_PRESSURE_ADVANCE ADVANCE={PA_VALUE}
  G90 #use absolute coordinates
  M83 #extruder relative mode
  STATUS_HEATING #Stealthburner status LEDs
  M190 S{BED_TEMP} #Heat up and wait for bed to reach proper temp
  M104 S120 #Preheat extruder to 120 degrees to reduce final heatup time, this can run during homing/probing
  #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1
  #SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 Z_HEIGHT=0.2 PURGE_AMOUNT=20 #ADAPTIVE_ENABLE=True
  STATUS_HOMING #Stealthburner status LEDs
  SENSORLESS_HOME_X
  SENSORLESS_HOME_Y
  G28 Z #Home Z
  STATUS_CALIBRATING_Z #Stealthburner status LEDs
  Z_TILT_ADJUST #Gantry tilt calibration
  G28 Z #Home Z again
  STATUS_MESHING #Stealthburner status LEDs
  BED_MESH_CALIBRATE #Generate bed mesh
  STATUS_HEATING #Stealthburner status LEDs
  M109 S{EXTRUDER_TEMP} #Heat up and wait for extruder to reach proper temp
  LINE_PURGE
  STATUS_PRINTING #Stealthburner status LEDs
  #BED_MESH_PROFILE LOAD=default
  
[gcode_macro PRINT_END]
gcode:
  G4
  G1 X0 Y180 F3000
  G92 E0 #Reset extruder back to 0
  G92 E-5 F100 #Retract 5mm at 100mm/s
  TURN_OFF_HEATERS
  M107 #Turn off fan
  M84 #Disable motors

[gcode_macro FORCE_MOVE_LEFT]
description: Move X axis left by 10 without homing
gcode:
  G90
  SET_KINEMATIC_POSITION X=10
  G0 X0 F600
  M84

[gcode_macro FORCE_MOVE_RIGHT]
description: Move X axis right by 10 without homing
gcode:
  G90
  SET_KINEMATIC_POSITION X=0
  G0 X10 F600
  M84

[gcode_macro FORCE_MOVE_BACK]
description: Move Y axis back by 10 without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Y=10
  G0 Y0 F600
  M84

[gcode_macro FORCE_MOVE_FORWARD]
description: Move Y axis forward by 10 without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Y=0
  G0 Y10 F600
  M84

[gcode_macro FORCE_MOVE_UP]
description: Move Z axis up by 10 without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z10 F600
  M84

[gcode_macro FORCE_MOVE_DOWN]
description: Move Z axis down by 10 without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=10
  G0 Z0 F600
  M84




#----------------------------------------------------------

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        HOME_ALL
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        SENSORLESS_HOME_X
        SENSORLESS_HOME_Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        HOME_ALL
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED